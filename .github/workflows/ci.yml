name: build-wheels

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

env:
  COLUMNS: 150

jobs:
  build:
    name: build on ${{ matrix.os }} (${{ matrix.target }} - ${{ matrix.interpreter || 'all' }}${{ matrix.os == 'linux' && format(' - {0}', matrix.manylinux == 'auto' && 'manylinux' || matrix.manylinux) || '' }})
    # only run on push to main and on release
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        # os: [linux, macos, windows]
        os: [linux, macos]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          # manylinux for various platforms, plus x86_64 pypy
          - os: linux
            manylinux: auto
            target: aarch64
          - os: linux
            manylinux: auto
            target: armv7
            # interpreter: 3.7 3.8 3.9 3.10 3.11 3.12
            interpreter: 3.11 3.12
          - os: linux
            manylinux: auto
            target: ppc64le
            # interpreter: 3.7 3.8 3.9 3.10 3.11 3.12
            interpreter: 3.11 3.12
          - os: linux
            manylinux: auto
            target: s390x
            # interpreter: 3.7 3.8 3.9 3.10 3.11 3.12
            interpreter: 3.11 3.12

          # musllinux
          # - os: linux
          #   manylinux: musllinux_1_1
          #   target: x86_64
          # - os: linux
          #   manylinux: musllinux_1_1
          #   target: aarch64

          # macos;
          # all versions x86_64
          # arm pypy and older pythons which can't be run on the arm hardware for PGO
          - os: macos
            target: x86_64
          - os: macos
            target: aarch64
            # interpreter: 3.7 3.8 3.9 pypy3.8 pypy3.9 pypy3.10

          # windows;
          # x86_64 pypy builds are not PGO optimized
          # i686 not supported by pypy
          # aarch64 only 3.11 and up, also not PGO optimized
          # - os: windows
          #   target: x86_64
          #   interpreter: pypy3.8 pypy3.9 pypy3.10
          # - os: windows
          #   target: i686
          #   python-architecture: x86
          #   interpreter: 3.7 3.8 3.9 3.10 3.11 3.12
          # - os: windows
          #   target: aarch64
          #   interpreter: 3.11 3.12

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - run: pip install -U twine 'ruff==0.1.3' typing_extensions

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux == 'manylinux' && 'auto' || matrix.manylinux }}
          # args: --release --features python --out dist --interpreter ${{ matrix.interpreter || '3.7 3.8 3.9 3.10 3.11 3.12 pypy3.7 pypy3.8 pypy3.9 pypy3.10' }}
          args: --release --features python --out dist --interpreter ${{ matrix.interpreter || '3.11 3.12' }}
          rust-toolchain: nightly
          docker-options: -e CI

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

